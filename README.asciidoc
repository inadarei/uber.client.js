= Node.js Client for UBER Hypermedia Type
:toc:
:numbered:

== Document Status
Author::
  Irakli Nadareishvili
Status::
  *[white red-background]#Working Draft#*

////
  *[white blue-background]#Release Candidate#*
  *[white green-background]#Released#*
////

Last Updated::
  {docdate}

== General
Node.js client is an implementation of an SDK-level client for the http://uberhypermedia.org[UBER hypermedia message format]

== Design Goals
Minimal, robust, extensible

== API Documentation

=== Class: Message

==== Properties

+version+::
  returns the version of the UBER format used in this message

==== Methods

Message(message)::
constructor. Initialized by a properly-formatted UBER message serialized in XML or JSON.

data()::
returns an array of `Data` elements
  
error()::
returns an array of `Data` elements
  
raw()::
returns the raw original text of the message (XML or JSON). Response object is of the form: 

rawFormat()::
returns the format of the original text of the message ('xml' or 'json')

toJSON()::
serializes the current message object into UBER JSON representation

toXML()::
serializes the current message object into UBER XML representation

=== Class: Data

==== Properties

==== Methods

query(selector [, context])::
returns a new Data elements containing child Data elemenst found in the context Data object based on passed argument(s). 
Inpsired by http://api.jquery.com/jQuery/[jQuery()]

    +selector+;;
      is a JSON object, value of which is a regular expression, and key is one of the following three options:
      
      - +id+ matches elements that have ID specifying the regular expression
      - +name+ matches elements that have ID specifying the regular expression
      - +rel+ matches elements that have ID specifying the regular expression
      
      a special case of: {"*" : "*"} stands for: "all".
    +context+;;
      can have one of two values:
      - 'children'
      - 'recursive'
    
### Class: LinkRelation

#### Properties

1. name

#### Methods

1. isURL() - is link relation name a proper URL?
2. resolve() - resolve the link relation, if it is a proper URL

### Class: Parser

#### Methods

1. Constructors(message) 
2. detect() - detects the source serialization format of a message: JSON, XML or invalid (for now)
2. transcode(message, inputFormat = null) - transcodes any supported input format (for now: XML) to UBER/JSON
3. parse(message, inputFormat = null) - parses any supported input format (XML or JSON, for now) into UBER Message object graph. Parsing is always lazy: only first level of the hierarchy is parsed.


